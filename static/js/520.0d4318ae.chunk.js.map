{"version":3,"file":"static/js/520.0d4318ae.chunk.js","mappings":"mSAEaA,EAAcC,EAAAA,EAAAA,IAAH,8JAUXC,EAAOD,EAAAA,EAAAA,KAAH,iOAYJE,EAAmBF,EAAAA,EAAAA,OAAH,qPAchBG,EAAwBH,EAAAA,EAAAA,KAAH,mIASrBI,EAAkBJ,EAAAA,EAAAA,MAAH,0P,SCnCfK,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3B,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACE,SAACV,EAAD,WACE,UAACE,EAAD,CAAMK,SAfW,SAAAI,GACnBA,EAAMC,iBAEoB,KAAtBH,EAAWI,QAKfN,EAASE,GAETC,EAAc,KANZI,EAAAA,GAAAA,KAAW,gCAOd,EAIG,WACE,SAACX,EAAD,CAAkBY,KAAK,SAAvB,UACE,SAACX,EAAD,WACE,SAAC,MAAD,CAAeY,KAAK,OAAOC,KAAK,iBAIpC,SAACZ,EAAD,CACEU,KAAK,OACLG,aAAa,MACbC,WAAS,EACTC,YAAY,4BACZC,MAAOZ,EACPa,SA9BkB,SAAAX,GAAK,OAAID,EAAcC,EAAMY,OAAOF,MAA/B,QAmChC,E,SCkCD,EAtEe,WAAO,IAAD,EACnB,GAAwCb,EAAAA,EAAAA,UAAS,IAAjD,eAAOgB,EAAP,KAAqBC,EAArB,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAK,UAAGF,EAAYG,IAAI,gBAAnB,QAA+B,GACpCC,GAAWC,EAAAA,EAAAA,MAkBjB,OAZAC,EAAAA,EAAAA,YAAU,WACR,GAAIJ,EACF,KACEK,EAAAA,EAAAA,IAAeL,GAAOM,MAAK,SAAAC,GACzBX,GAAgB,OAAIW,EAASC,SAC9B,GAGF,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CAEJ,GAAE,CAACT,KAGF,iCACE,SAACvB,EAAD,CAAYC,SAlBS,SAAAE,GACvBmB,EAA8B,KAAfnB,EAAoB,CAAEoB,MAAOpB,GAAe,CAAC,EAC7D,IAkB4B,IAAxBe,EAAaiB,QAA0B,KAAVZ,IAC5B,UAAC,KAAD,CACEa,MAAO,CACLC,UAAW,SACXC,SAAU,OACVC,WAAY,OAJhB,yBAOa,kBAAMH,MAAO,CAAEI,MAAO,WAAtB,UAAoCjB,EAApC,OAPb,0BAYDL,EAAaiB,OAAS,IACrB,UAAC,KAAD,CAAOC,MAAO,CAAEC,UAAW,UAA3B,uCAC6B,KAC3B,kBAAMD,MAAO,CAAEI,MAAO,WAAtB,UAAoCjB,EAApC,OAFF,QAMF,SAAC,KAAD,UACGL,EAAauB,KAAI,YAA0C,IAAvCC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eACpC,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAMC,GAAE,UAAKH,GAAMI,MAAO,CAAEC,KAAMtB,GAAlC,WACE,SAAC,KAAD,CACEuB,IACGL,EAAD,0CAEuCA,GADnCM,EAGNC,IAAKN,EACLO,MAAM,SAER,SAAC,KAAD,UAAwBP,QAXLF,EAe1B,QAIR,C","sources":["components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 400px;\n\n  margin: 15px auto;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  border: 1px solid black;\n  border-radius: 8px;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormButtonLabel = styled.span`\n  width: 20px;\n  height: 20px;\n  padding: 0;\n  overflow: hidden;\n  white-space: nowrap;\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { MdImageSearch } from 'react-icons/md';\nimport PropTypes from 'prop-types';\nimport {\n  Form,\n  SearchFormButton,\n  SearchFormButtonLabel,\n  SearchFormInput,\n  FormWrapper,\n} from './SearchForm.styled';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = event => setInputValue(event.target.value);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (inputValue.trim() === '') {\n      toast.warn('Search query can`t be empty!(');\n      return;\n    }\n\n    onSubmit(inputValue);\n\n    setInputValue('');\n  };\n\n  return (\n    <FormWrapper>\n      <Form onSubmit={handleSubmit}>\n        <SearchFormButton type=\"submit\">\n          <SearchFormButtonLabel>\n            <MdImageSearch size=\"30px\" fill=\"#a01d1d\" />\n          </SearchFormButtonLabel>\n        </SearchFormButton>\n\n        <SearchFormInput\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies in database\"\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n      </Form>\n    </FormWrapper>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { getMovieByName } from 'services/themoviedb-api';\nimport defaultImage from './defaultImage.jpeg';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\n\nimport {\n  ImageGalleryItem,\n  ImageGalleryItemImage,\n  ImageGalleryItemTitle,\n  ImageGalleryList,\n  Title,\n} from 'pages/Home/Home.styled';\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [searchQuery, setSearchQuery] = useSearchParams();\n  const query = searchQuery.get('query') ?? '';\n  const location = useLocation();\n\n  const handleFormSubmit = inputValue => {\n    setSearchQuery(inputValue !== '' ? { query: inputValue } : {});\n  };\n\n  useEffect(() => {\n    if (query) {\n      try {\n        getMovieByName(query).then(response => {\n          setSearchMovies([...response.results]);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [query]);\n\n  return (\n    <>\n      <SearchForm onSubmit={handleFormSubmit}></SearchForm>\n\n      {searchMovies.length === 0 && query !== '' && (\n        <Title\n          style={{\n            textAlign: 'center',\n            fontSize: '30px',\n            fontWeight: '700',\n          }}\n        >\n          The search <span style={{ color: '#a01d1d' }}>{query} </span>\n          did not give results\n        </Title>\n      )}\n\n      {searchMovies.length > 0 && (\n        <Title style={{ textAlign: 'center' }}>\n          Search results for keyword{' '}\n          <span style={{ color: '#a01d1d' }}>{query} </span>:\n        </Title>\n      )}\n\n      <ImageGalleryList>\n        {searchMovies.map(({ id, poster_path, original_title }) => {\n          return (\n            <ImageGalleryItem key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                <ImageGalleryItemImage\n                  src={\n                    !poster_path\n                      ? defaultImage\n                      : `https://image.tmdb.org/t/p/w500/${poster_path}`\n                  }\n                  alt={original_title}\n                  width=\"300\"\n                />\n                <ImageGalleryItemTitle>{original_title}</ImageGalleryItemTitle>\n              </Link>\n            </ImageGalleryItem>\n          );\n        })}\n      </ImageGalleryList>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["FormWrapper","styled","Form","SearchFormButton","SearchFormButtonLabel","SearchFormInput","SearchForm","onSubmit","useState","inputValue","setInputValue","event","preventDefault","trim","toast","type","size","fill","autoComplete","autoFocus","placeholder","value","onChange","target","searchMovies","setSearchMovies","useSearchParams","searchQuery","setSearchQuery","query","get","location","useLocation","useEffect","getMovieByName","then","response","results","error","console","log","length","style","textAlign","fontSize","fontWeight","color","map","id","poster_path","original_title","to","state","from","src","defaultImage","alt","width"],"sourceRoot":""}