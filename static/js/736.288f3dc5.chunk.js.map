{"version":3,"file":"static/js/736.288f3dc5.chunk.js","mappings":"iPAEaA,EAAcC,EAAAA,EAAAA,GAAH,wKAUXC,EAAWD,EAAAA,EAAAA,GAAH,wI,2BCwCrB,EA7Ca,WACX,OAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAYR,OAVAE,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,IAAoBH,GAASI,MAAK,SAAAC,GAChCN,EAAaM,EAASC,KAAKC,OAAO,EAAG,GACtC,GAGF,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACR,KAGF,8BACIF,EAAUa,QAKV,SAACjB,EAAD,UACGI,EAAUc,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACxC,OACE,UAACpB,EAAD,YACE,gBACEqB,IACGH,EAAD,0CAEuCA,GADnCI,EAGNC,IAAG,UAAKJ,GACRK,MAAM,WAER,uBAAIL,KACJ,wBAAKC,MAXQH,EAclB,OArBH,SAAC,KAAD,kEA0BP,C,uLChDYQ,EAAa1B,EAAAA,EAAAA,EAAH,mEAKV2B,EAAgB3B,EAAAA,EAAAA,GAAH,sBAEb4B,EAAe5B,EAAAA,EAAAA,EAAH,gDAIZ6B,EAAgB7B,EAAAA,EAAAA,EAAH,6DAKb8B,EAAa9B,EAAAA,EAAAA,GAAH,oJ","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.styled.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastWrapper = styled.ul`\n  width: 1200px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  margin: 20px auto;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 23%;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCreditsById } from 'services/themoviedb-api';\nimport { CastItem, CastWrapper } from './Cast.styled';\nimport { ReviewText } from '../Reviews/Reviews.styled';\nimport defaultImage from './defaultImage.jpeg';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    try {\n      getMovieCreditsById(movieId).then(response => {\n        setMovieCast(response.cast.splice(0, 8));\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {!movieCast.length ? (\n        <ReviewText>\n          Sorry! We do not have information about this movie\n        </ReviewText>\n      ) : (\n        <CastWrapper>\n          {movieCast.map(({ id, profile_path, name, character }) => {\n            return (\n              <CastItem key={id}>\n                <img\n                  src={\n                    !profile_path\n                      ? defaultImage\n                      : `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  }\n                  alt={`${name}`}\n                  width=\"120px\"\n                />\n                <p>{name}</p>\n                <em>{character}</em>\n              </CastItem>\n            );\n          })}\n        </CastWrapper>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const ReviewText = styled.p`\n  text-align: center;\n  font-size: 20px;\n`;\n\nexport const ReviewWrapper = styled.ul``;\n\nexport const ReviewAuthor = styled.b`\n  margin-bottom: 12px;\n`;\n\nexport const ReviewContent = styled.p`\n  width: 800px;\n  font-size: 18px;\n`;\n\nexport const ReviewItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  :not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n"],"names":["CastWrapper","styled","CastItem","useState","movieCast","setMovieCast","movieId","useParams","useEffect","getMovieCreditsById","then","response","cast","splice","error","console","log","length","map","id","profile_path","name","character","src","defaultImage","alt","width","ReviewText","ReviewWrapper","ReviewAuthor","ReviewContent","ReviewItem"],"sourceRoot":""}